stages:
  - build
  - test
  - deploy

variables:

  PROJECT_DIR: "/var/www"
  PRODUCTION_DIR: "${PROJECT_DIR}/app"
  STAGING_DIR: "${PROJECT_DIR}/staging"
  FRONTEND_DIR: "todo-front"
  BACKEND_DIR: "todo-back"


  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_VERSION: "3.9"


cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - frontend/node_modules/
    - backend/.cache/pip/
    - backend/venv/

build_backend:
  stage: build
  only:
    - br1
  tags:
    - gitlab
  script:
    - cd ${BACKEND_DIR}
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python setup.py build
  artifacts:
    paths:
      - ${BACKEND_DIR}/venv/
      - ${BACKEND_DIR}/build/
    expire_in: 1 week


test_backend:
  stage: test
  only:
    - br1
  tags:
    - gitlab
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_URL: "postgres://runner@postgres/test_db"
  script:
    - cd ${BACKEND_DIR}
    - apt-get update && apt-get install -y libpq-dev gcc python3-dev
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - python manage.py migrate
    - pytest --junitxml=report.xml
  artifacts:
    reports:
      junit: ${BACKEND_DIR}/report.xml
    expire_in: 1 week


before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "${DEPLOY_KEY}" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan ${DEPLOY_HOST} >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

deploy_staging:
  stage: deploy
  only:
    - br1
  environment:
    name: staging
    url: http://${DEPLOY_HOST}:8081
  script:
    - echo "Deploying backend to staging..."
    - rsync -avz -e "ssh -o StrictHostKeyChecking=no" ${BACKEND_DIR}/ ${DEPLOY_USER}@${DEPLOY_HOST}:${STAGING_DIR}/backend/
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "
      cd ${STAGING_DIR}/backend &&
      source venv/bin/activate &&
      pip install -r requirements.txt &&
      gunicorn -b 0.0.0.0:8081 todoback.wsgi:application --daemon &&
      sudo systemctl restart nginx
      "

deploy_production:
  stage: deploy
  only:
    - master
  when: manual
  environment:
    name: production
    url: http://${DEPLOY_HOST}
  script:
    - echo "Deploying to production..."
    - rsync -avz -e "ssh -o StrictHostKeyChecking=no" ${BACKEND_DIR}/ ${DEPLOY_USER}@${DEPLOY_HOST}:${PRODUCTION_DIR}/backend/
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "
      cd ${PRODUCTION_DIR}/backend &&
      source venv/bin/activate &&
      pip install -r requirements.txt &&
      sudo systemctl restart todo.service &&
      sudo systemctl restart nginx
      "