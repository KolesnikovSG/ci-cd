name: My-pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DJANGO_SETTINGS_MODULE: todoback.settings
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      working-directory: ./Todo-back-main
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov
        
    - name: Run tests with coverage
      working-directory: ./Todo-back-main
      run: |
        pytest tests/ --cov=. --cov-report=xml --junitxml=test-results.xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: Todo-back-main/test-results.xml
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: Todo-back-main/coverage.xml

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      working-directory: ./Todo-back-main
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Collect static files
      working-directory: ./Todo-back-main
      run: |
        python manage.py collectstatic --noinput
        
    - name: Create deployment package
      run: |
        mkdir -p deployment/static
        cp -r Todo-back-main/* deployment/
        cp -r Todo-front-main/* deployment/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/
        retention-days: 1
        
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Backend deployment
          cd /opt/Todo-back-main
          git pull origin main
          source /opt/venv/bin/activate
          pip install -r requirements.txt
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput
          
          # Frontend deployment
          cd /var/www/html/Todo-front-main
          git pull origin main
          cp -r * /var/www/html/
          
          # Restart services
          sudo systemctl restart todo.service
          sudo systemctl restart nginx
