name: My-pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      working-directory: ./Todo-back-main
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest pytest-django psycopg2-binary
        
    - name: Collect static files
      working-directory: ./Todo-back-main
      run: |
        python manage.py collectstatic --noinput
        
    - name: Create virtual environment archive
      run: |
        python -m venv venv
        ./venv/bin/pip install -r Todo-back-main/requirements.txt
        tar czf venv.tar.gz venv/
        
    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-artifacts
        path: |
          Todo-back-main/
          Todo-front-main/
          venv.tar.gz

  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
  
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: app-artifacts
        path: .
        
    - name: Restore virtual environment
      run: |
        tar xzf venv.tar.gz
        rm venv.tar.gz
        
    - name: Run tests
      working-directory: ./Todo-back-main
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DJANGO_SETTINGS_MODULE: todoback.test_settings
        PATH: ${{ github.workspace }}/venv/bin:$PATH
      run: |
        python manage.py test todo.tests

  deploy:
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: app-artifacts
        path: .
        
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Deploy to VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
      
        ssh ${VPS_USER}@${VPS_HOST} "mkdir -p ~/temp_deploy && chmod 700 ~/temp_deploy"
        
        ssh-keyscan -H -t rsa,ecdsa,ed25519 ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        
        scp -o StrictHostKeyChecking=no venv.tar.gz ${VPS_USER}@${VPS_HOST}:~/temp_deploy/
       
        rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" \
          Todo-back-main/ ${VPS_USER}@${VPS_HOST}:/opt/Todo-back-main/
          
        rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" \
          Todo-front-main/ ${VPS_USER}@${VPS_HOST}:/opt/Todo-front-main/
        
        ssh ${VPS_USER}@${VPS_HOST} "
          set -ex
          sudo mkdir -p /opt/venv
          sudo tar xzf ~/temp_deploy/venv.tar.gz -C /opt/
          sudo chown -R ${VPS_USER}:${VPS_USER} /opt/venv
          rm -rf ~/temp_deploy
          
          cd /opt/Todo-back-main
          source /opt/venv/bin/activate
          python manage.py migrate
          
          sudo cp /opt/Todo-back-main/todo.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable todo.service
          sudo systemctl restart todo.service
        "
              
        
