name: My-pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install backend dependencies
      working-directory: ./Todo-back-main
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest pytest-django
        
    - name: Run tests
      working-directory: ./Todo-back-main
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DJANGO_SETTINGS_MODULE: todoback.test_settings
      run: |
        python manage.py test todo.tests

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install backend dependencies
      working-directory: ./Todo-back-main
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Save backend dependencies as artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-deps
        path: Todo-back-main/
        if-no-files-found: error
    
    - name: Save frontend as artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend
        path: Todo-front-main/
        if-no-files-found: error

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-deps
        path: Todo-back-main
        
    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend
        path: Todo-front-main
    
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
    
    - name: Deploy to VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        # Sync backend
        rsync -avz --delete Todo-back-main/ ${VPS_USER}@${VPS_HOST}:/opt/Todo-back-main/
        
        # Sync frontend
        rsync -avz --delete Todo-front-main/ ${VPS_USER}@${VPS_HOST}:/opt/Todo-front-main/
        
        # SSH commands to setup backend
        ssh ${VPS_USER}@${VPS_HOST} << EOF
          set -e
          cd /opt/Todo-back-main
          source /opt/venv/bin/activate
          pip install -r requirements.txt
          python manage.py migrate
          python manage.py collectstatic --noinput
          sudo systemctl restart todo-server
        EOF
